<?php

/* test: Class to hold string value with today's hours (supplements Hours box). 
*/

class HoursToday {
  public $message;

  function __construct( $message ) {
    $this->message = $message;
  }

};

$testVar = new HoursToday('test message');
variable_set('testSet', $testVar->message);
$testGet = variable_get('testSet', 'default');

/* end class testing */

// Gets the Closed radio option from the config settings.
function closed_get_option(){
  $isClosed = variable_get('closed_radio_choice', 'default');
  return $isClosed;
}

// Gets the 24 Hours radio option default from the config settings.
function open24_get_option(){
  $show24Default = variable_get('open24_radio_choice', 'default');
  return $show24Default;  
}

/* Get the open hours for the day, returns html for a group-specific Hours box. */

function getDay($group, $libval) {

  $API = "https://api.wrlc.org/hours/copy-json.php?lib=gw&libid=" . $libval . "&daycount=1";

  // Set cache file name and path.
  $cacheFile = $group . 'Hours-wrlc-day';
  $path = '/tmp/' . $cacheFile . '.cache';

  // Check to see if cached file is older than 15 minutes (900, units in seconds per UNIX/POSIX time), 
  // if so update cache.
  if ((!file_exists($path) || time() - filemtime($path) > 900) && $cache = fopen($path, 'w+'))
  {
      $wrlc_json = file_get_contents($API); // get json from scratch if old.
      fwrite($cache, $wrlc_json); // write block to cache.
      fclose($cache);
  }
  else
  {
      $wrlc_json = file_get_contents($path); // get block from cache file.
  }

  $jsondata = $wrlc_json;
  $jsondatafixed = str_replace("},]}}","}]}}" , $jsondata);
  $itemArray  = json_decode($jsondatafixed, true); // Decode JSON to associative array.

  $hoursAPI = $itemArray;

  $todayDay = $hoursAPI['library']['week'][0]['day1'];
  $todayOpen = $hoursAPI['library']['week'][0]['open'];
  $todayClose = $hoursAPI['library']['week'][0]['close'];
  if ($todayClose == "12:00AM") {
    // clarifying string output to avoid confusion
    $todayClose = "midnight";
  }
  if ($todayOpen == "closed" || $todayOpen == "by appointment") {
    // removing joiner from string when not needed
    $joiner = "";
  }
  else {
    $joiner = "&nbsp;-&nbsp;";
  }
  if ($todayDay == "closed") {
    $todayOpen = "(closed)";
  }
  if ($todayDay == "by appointment") {
    $todayOpen = "(by appointent)";
  }

  if (isset($hoursAPI['library']['week'][0]['holiday'])) {
    $todayString = "<p>" . $hoursAPI['library']['week'][0]['message'] . "</p>";
  }
  else {
    $todayString = "<p class='scrc-hours'>" . $todayDay . " Hours: " . $todayOpen . $joiner . $todayClose . "</p>";
  }
  return $todayString;
}

/* Refactor using getDay function for the json */
/* Gelman Today building hours from WRLC API. */

function gelmanHoursAPI() {

  $weekDayNum = date('w');

  $API = "https://api.wrlc.org/hours/copy-json.php?lib=gw&libid=1&daycount=1";

  // Set cache file name and path.
  $cacheFile = 'libraryHours-wrlc';
  $path = '/tmp/' . $cacheFile . '.cache';

  // Check to see if cached file is older than 15 minutes (900, units in seconds per UNIX/POSIX time), 
  // if so update cache.
  if ((!file_exists($path) || time() - filemtime($path) > 900) && $cache = fopen($path, 'w+'))
  {
      $wrlc_json = file_get_contents($API); // get json from scratch if old.
      fwrite($cache, $wrlc_json); // write block to cache.
      fclose($cache);
  }
  else
  {
      $wrlc_json = file_get_contents($path); // get block from cache file.
  }

  $jsondata = $wrlc_json;
  $jsondatafixed = str_replace("},]}}","}]}}" , $jsondata);
  $itemArray  = json_decode($jsondatafixed, true); // Decode JSON to associative array.

  $hoursAPI = $itemArray;

  //$index = $weekDayNum;
  $todayDay = $hoursAPI['library']['week'][0]['day1'];
  $todayOpen = $hoursAPI['library']['week'][0]['open'];
  $todayClose = $hoursAPI['library']['week'][0]['close'];
  if ($todayClose == "12:00AM") {
    // clarifying output to avoid confusion
    $todayClose = "midnight";
  }

  /* Set simple schema.org string for open hours. Move this to getDay function so that other Hours Box blocks can use it. */
  /* Add leading 0 if needed. */
  if (strlen($todayOpen) == 6) {  
    $todayOpen24 = '0' . $todayOpen;
  }
  else {
    $todayOpen24 = $todayOpen;
  }
  /* Strip the AM or PM suffix. */
  $todayOpen24 = substr($todayOpen24,0,5);
  /* Add leading 0 if needed. */
  if (strlen($todayClose) == 6) {
    $todayClose24 = '0' . $todayClose;
  }
  else {
    $todayClose24 = $todayClose;
  }
  /* Strip the AM or PM suffix. */
  $todayClose24 = substr($todayClose24,0,5);
  /* Change to 24 hour time */
  if ($todayClose24 != '12:00') {
    $temp = substr($todayClose24,0,2);
    $temp2 = $temp + 12;
    $todayClose24 = $temp2 . substr($todayClose24,2,3);
  }

  $schemaString = substr(date('D'),0,2) . ' ' . $todayOpen24 . '-' . $todayClose24;

  $theDate = new DateTime();

  /* this is a custom set of conditions to check against, only if the options at the WRLC interface http://www.libraries.wrlc.org/admin/hours/ don't provide the right combination of dates/times/message */
  include_once "library_hours_special.php";

  if (isset($specialDay)) {
    // check if var is set from included file above
    $gelmanToday = $specialDay;
  } 
  elseif (isset($hoursAPI['library']['week'][0]['holiday'])) {
    $gelmanToday = $hoursAPI['library']['week'][0]['message'];
  }
  elseif ($todayOpen == "closed" || closed_get_option() == 'default') {
    $gelmanToday = "Gelman Library is closed today";
  }
  else {
    if (open24_get_option() == 'default') {
      $open24 = "<br /><span style='font-size:.9em;'>(24-hours for GW students)</span>";
    }
    else {
      $open24 = '';
    }
    $gelmanToday = "Open " . $todayOpen . " to " . $todayClose . $open24;
  }

  $hoursString = "<div itemscope itemtype='http://schema.org/Library' itemid='http://library.gwu.edu'><span class='sr-only' itemprop='name'>Estelle and Melvin Gelman Library</span><p><span style='font-size:.9em; line-height:2em;'>" . $todayDay . " " . date_format($theDate, 'F jS') . "</span><br /><time itemprop='openingHours' datetime='" . $schemaString . "'>"  . $gelmanToday. "</time></p><p class='library-hours-last'>See our <a href='/hours'>Hours</a> page for more</p></div>";

  return $hoursString;
}

/* (replaced by call to getDay function) SCRC Today Open Hours from WRLC API */

function scrcHoursAPI() {

  $API = "https://api.wrlc.org/hours/copy-json.php?lib=gw&libid=9&daycount=1";

  // Set cache file name and path.
  $cacheFile = 'scrcHours-wrlc';
  $path = '/tmp/' . $cacheFile . '.cache';

  // Check to see if cached file is older than 15 minutes (900, units in seconds per UNIX/POSIX time), 
  // if so update cache.
  if ((!file_exists($path) || time() - filemtime($path) > 900) && $cache = fopen($path, 'w+'))
  {
      $wrlc_json = file_get_contents($API); // get json from scratch if old.
      fwrite($cache, $wrlc_json); // write block to cache.
      fclose($cache);
  }
  else
  {
      $wrlc_json = file_get_contents($path); // get block from cache file.
  }

  $jsondata = $wrlc_json;
  $jsondatafixed = str_replace("},]}}","}]}}" , $jsondata);
  $itemArray  = json_decode($jsondatafixed, true); // Decode JSON to associative array.

  $hoursAPI = $itemArray;

  $todayDay = $hoursAPI['library']['week'][0]['day1'];
  $todayOpen = $hoursAPI['library']['week'][0]['open'];
  $todayClose = $hoursAPI['library']['week'][0]['close'];
  if ($todayClose == "12:00AM") {
    // clarifying string output to avoid confusion
    $todayClose = "midnight";
  }
  if ($todayOpen == "closed" || $todayOpen == "by appointment") {
    $joiner = "";
  }
  else {
    $joiner = "&nbsp;-&nbsp;";
  }
  if ($todayDay == "Saturday") {
    $todayOpen = "";
    $joiner = "";
    $extramsg = "<br />(by appointment only)";
  }
  else {
    $extramsg = "";
  }

  if (isset($hoursAPI['library']['week'][0]['holiday'])) {
    $todayString = "<p>" . $hoursAPI['library']['week'][0]['message'] . "</p>";
  }
  else {
    $todayString = "<p class='scrc-hours'>" . $todayDay . " Hours: " . $todayOpen . $joiner . $todayClose . $extramsg . "</p>";
  }
  return $todayString;
}


/* Get the hours for all groups for the whole week. */

function getWeek($group, $libval) {

  // Get 7 days from API.
  $API = "https://api.wrlc.org/hours/copy-json.php?lib=gw&libid=" . $libval . "&daycount=7";

  // Set cache file name and path.
  $cacheFile = $group . 'Hours-wrlc-week';
  $path = '/tmp/' . $cacheFile . '.cache';

  // Check to see if cached file is older than 15 minutes (900, units in seconds per UNIX/POSIX time), 
  // if so update cache.
  if ((!file_exists($path) || time() - filemtime($path) > 900) && $cache = fopen($path, 'w+'))
  {
      $wrlc_json = file_get_contents($API); // get json from scratch if old.
      fwrite($cache, $wrlc_json); // write block to cache.
      fclose($cache);
  }
  else
  {
      $wrlc_json = file_get_contents($path); // get block from cache file.
  }

  $jsondata = $wrlc_json;
  $jsondatafixed = str_replace("},]}}" , "}]}}" , $jsondata);
  $jsondatafixed2 = str_replace("}{" , "},{" , $jsondatafixed);
  $itemArray  = json_decode($jsondatafixed2, true); // Decode JSON to associative array.

  $hoursAPI = $itemArray;

  /* Set the day strings. */
  $day1Day = "TODAY <span class='sr-only'>" . $hoursAPI['library']['week'][0]['day1'] . "</span>";
  $day2Day = "Tomorrow <span class='sr-only'>" . $hoursAPI['library']['week'][1]['day2'] . "</span>"; 
  //$day2Day = $hoursAPI['library']['week'][1]['day2'];
  $day3Day = $hoursAPI['library']['week'][2]['day3'];
  $day4Day = $hoursAPI['library']['week'][3]['day4'];
  $day5Day = $hoursAPI['library']['week'][4]['day5'];
  $day6Day = $hoursAPI['library']['week'][5]['day6'];
  $day7Day = $hoursAPI['library']['week'][6]['day7'];

  /* Loop through and get open and close times (with substitutions for Closed, Appointment and Midnight), sets day1Hours etc vara. */
  $joiner = "<span class='hours-joiner'> - </span>";

  for($i = 1; $i <= 7; $i++) {
    $var = 'day' . $i . 'Hours';
    $dayVar = ($i - 1);
    if ($hoursAPI['library']['week'][$dayVar]['open'] == 'closed') {
      $$var = "(closed)";
    }
    elseif ($hoursAPI['library']['week'][$dayVar]['open'] == 'by appointment' && $libval == 9) {
      $$var = "(<a href='/scrc/access'>by appointment</a>)";
    }
    elseif ($hoursAPI['library']['week'][$dayVar]['open'] == 'by appointment') {
      $$var = "(by appointment)";
    }
    elseif (isset($hoursAPI['library']['week'][$dayVar]['holiday'])) {
      $$var = "Closed for " . $hoursAPI['library']['week'][$dayVar]['holiday'];
    }
    else {
      if ($hoursAPI['library']['week'][$dayVar]['close'] == '12:00AM') {
        $closeTime = "midnight";
      }
      else {
        $closeTime = $hoursAPI['library']['week'][$dayVar]['close'];
      }
      $$var = $hoursAPI['library']['week'][$dayVar]['open'] . $joiner . $closeTime;
    }
  }

  $flexHTML = "
    <div class='equalHMRWrap eqWrap'>
      <div class='equalHMR eq'><span class='hoursToday'>" . $day1Day . "</span><br>" . $day1Hours . "</div>
      <div class='equalHMR eq'><span class='hoursDay'>" . $day2Day . "</span><br>" . $day2Hours . "</div>
      <div class='equalHMR eq'><span class='hoursDay'>" . $day3Day . "</span><br>" . $day3Hours . "</div>
      <div class='equalHMR eq'><span class='hoursDay'>" . $day4Day . "</span><br>" . $day4Hours . "</div>
      <div class='equalHMR eq'><span class='hoursDay'>" . $day5Day . "</span><br>" . $day5Hours . "</div>
      <div class='equalHMR eq'><span class='hoursDay'>" . $day6Day . "</span><br>" . $day6Hours . "</div>
      <div class='equalHMR eq'><span class='hoursDay'>" . $day7Day . "</span><br>" . $day7Hours . "</div>
    </div>";

  return $flexHTML;

}

function ecklesWeek() {
$ecklesWeek = 
  "<div class='paddingBlock'>
  <div class='headHMR equalHMRWrap eqWrap'>
    <div class='headTitleHMR eq'>
      <h3>Eckles Library Building Hours</h3>
    </div>
    <div class='headTextHMR eq'>
      <p class='hoursText'>202.242.6632 &bull; eckles@gwu.edu</p>
    </div>
  </div>" . getWeek('eckles','10') . "</div>";
return $ecklesWeek;
}

function massiveTable() {

/* The schema.org values are only set for the first set of hours (main building hours) and are currently 'Mo-Su' which means 7 days a week without specifying the hours */

$flexHTML = "<div class='paddingBlock'>
<div class='headHMR equalHMRWrap eqWrap'>
  <div class='headTitleHMR eq'>
    <span itemscope itemtype='http://schema.org/Library' itemid='http://library.gwu.edu' property='content:encoded'><h3>Gelman Library Building Hours <strong>*</strong></h3>
    <span class='sr-only' itemprop='name'>Estelle and Melvin Gelman Library</span>
  </div>
  <div class='headTextHMR eq'>
    <p class='hoursText'>24-hour building access for GW students, faculty, and staff</p><time itemprop='openingHours' datetime='Mo-Su'></time>
  </div>
</div>" .
getWeek('gelman','1') . 
"<div class='headHMR equalHMRWrap eqWrap'>
  <div class='headTitleHMR eq'>
    <h3>Check-Out Desk</h3>
  </div>
  <div class='headTextHMR eq'>
    <p class='hoursText'>202.994.6840 &bull; libcir@gwu.edu</p>
  </div>
</div>" .
getWeek('circ','2') .
"<div class='headHMR equalHMRWrap eqWrap'>
  <div class='headTitleHMR eq'>
    <h3>Ask Us Desk <strong>**</strong></h3>
  </div>
  <div class='headTextHMR eq'>
    <p class='hoursText'>202.994.6048 &bull; refdesk@gwu.edu</p>
  </div>
</div>" .
getWeek('ask','3') .
"<div class='headHMR equalHMRWrap eqWrap'>
  <div class='headTitleHMR eq'>
    <h3>University Writing Center <strong>***</strong></h3>
  </div>
  <div class='headTextHMR eq'>
    <p class='hoursText'>202.994.3765 &bull; gwriter@gwu.edu</p>
  </div>
</div>" .
getWeek('write','4') .
"<div class='headHMR equalHMRWrap eqWrap'>
  <div class='headTitleHMR eq'>
    <h3>Tech Commons</h3>
  </div>
  <div class='headTextHMR eq'>
    <p class='hoursText'>Lower Level B03 &bull; 202.994.7041</p>
  </div>
</div>" .
getWeek('commons','5') .
"<div class='headHMR equalHMRWrap eqWrap'>
  <div class='headTitleHMR eq'>
    <h3>National Security Archive</h3>
  </div>
  <div class='headTextHMR eq'>
    <p class='hoursText'>Suite 701 &bull; 202.994.7000</p>
  </div>
</div>" .
getWeek('nsa','7') .
"<div class='headHMR equalHMRWrap eqWrap'>
  <div class='headTitleHMR eq'>
    <h3>Global Resources Center</h3>
  </div>
  <div class='headTextHMR eq'>
    <p class='hoursText'>Suite 708 &bull; 202.994.7105 &bull; the GRC is available to graduate students via GWorld tap access any time the library is open</p>
  </div>
</div>" .
getWeek('grc','8') .
"<div class='headHMR equalHMRWrap eqWrap'>
  <div class='headTitleHMR eq'>
    <h3>Special Collections Research Center</h3>
  </div>
  <div class='headTextHMR eq'>
    <p class='hoursText'>Suite 704 &bull; 202.994.7549 &bull; speccoll@gwu.edu &bull; archives@gwu.edu</p>
  </div>
</div>" .
getWeek('scrc','9') .
"</div>";

  return $flexHTML;
}

/* Creating blocks. */

 /**
 * Implements hook_block_info().
 */
function library_hours_block_info() {
   $blocks = array();
   $blocks['library_hours_gelman_today'] = array(
     'info' => t("Today's Building Hours"),
   );
      $blocks['library_hours_scrc_today'] = array(
     'info' => t("Today's SCRC Hours"),
   );
      $blocks['library_hours_grc_today'] = array(
     'info' => t("Today's GRC Hours"),
   );
      $blocks['library_hours_all'] = array(
     'info' => t("GW Libraries Open Hours"),
   );
      $blocks['library_hours_eckles_today'] = array(
     'info' => t("Today's Eckles Hours"),
   );
      $blocks['library_hours_eckles_week'] = array(
     'info' => t("Eckles Library Hours (week)"),
   );


 return $blocks;
 }

 /**
 * Implements hook_block_view().
 */

 function library_hours_block_view($delta = '') {
   $block = array();
   switch ($delta) {
     case 'library_hours_gelman_today':
       $the_block = gelmanHoursAPI();
       $block['title'] = t('Building Hours');
       $block['content'] = $the_block;
       break;
     case 'library_hours_scrc_today':
       $the_block = getDay('scrc', 9);
       $block['title'] = t('SCRC Hours');
       $block['content'] = $the_block;
       break; 
     case 'library_hours_grc_today':
       $the_block = getDay('grc', 8);
       $block['title'] = t('GRC Hours');
       $block['content'] = $the_block;
       break;
     case 'library_hours_all':
       $the_block = massiveTable();
       $block['title'] = t('');
       $block['content'] = $the_block;
       break;
     case 'library_hours_eckles_today':
       $the_block = getDay('eckles', 10);
       $block['title'] = t('Eckles Library Hours');
       $block['content'] = $the_block;
       break;
     case 'library_hours_eckles_week':
       $the_block = ecklesWeek();
       $block['title'] = t('Eckles Library Open Hours');
       $block['content'] = $the_block;
       break;

     }

 return $block;
 }
 
  /**
 * Defines the Library Hours admin settings form.
 */
function library_hours_menu() {

  if(user_access(' admin')) {

    $items = array();

    $items['admin/config/content/library_hours'] = array(
      'title' => 'Library Hours Configuration',
      'description' => t('Configuration for the Library Hours display'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('library_hours_form'),
      'access arguments' => array('access administration pages'),
      'type' => MENU_NORMAL_ITEM,
    );

    return $items;
  }

  else {

    $items = array();

    $items['admin/config/content/library_hours'] = array(
      'title' => 'Library Hours Configuration',
      'description' => t('Configuration for the Library Hours display'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('library_hours_form'),
      'access arguments' => array('access administration pages'),
      'type' => MENU_NORMAL_ITEM,
    );

    return $items;
  }

}

function library_hours_form($form, &$form_state) {

    // Sets options as array for 'show 24' radio buttons.
    $radioOptions = array(
    'default'=>t('Show Gelman as open 24 hours for students in the Hours Box'),
    'off'=>t('Do NOT show Gelman as open 24 hours for students in the Hours Box')
    );

    // Sets options as array for 'Gelman closed' checkbox.
    $closedOptions = array(
      'default'=>t('Show Gelman as Closed in the Hours Box'),
      'off'=>t('Show the normal Gelman building hours') 
    );

  $form['open24_radio_choice'] = array(
    '#type' => 'radios',
    '#title' => t('Open 24 Hours Message'),
    '#description' => t('Display the Hours Box message about student access to Gelman library: "(24-hours for GW students)". This will display in the Hours Box on the landing page of the site.'),
    '#options' => $radioOptions,
    '#default_value'=>open24_get_option(),
  );

  $form['closed_radio_choice'] = array(
    '#type' => 'radios',
    '#title' => t('Gelman is Closed (use for emergency closures)'),
    '#description' => t('This will override the hours display in the Hours Box on the landing page of the site, use this for emergency closures only (i.e. snow days).'),
    '#options' => $closedOptions,
    '#default_value'=>closed_get_option(),
  );

  return system_settings_form($form);
 
}
